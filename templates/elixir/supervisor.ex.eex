defmodule <%= prj_name %> do
  use Application

  @connect_timeout 3000
  def start(_type, _args) do
    import Supervisor.Spec, warn: false

    children = [
      worker(<%= prj_name %>.Daemon, [host_port, @connect_timeout]),
    ]

    opts = [strategy: :one_for_one, name: <%= prj_name %>.Supervisor]
    Supervisor.start_link(children, opts)
  end


  defp host_port do
    host = get_env(<%= server_host %>)
    port = get_env(<%= server_port %>) |> String.to_integer
    {host, port}
  end

  def get_env(key), do: key |> atom_to_upcase |> get_env_validate

  def atom_to_upcase(atom), do: atom |> Atom.to_string |> String.upcase

  defp get_env_validate(var), do: System.get_env(var) |> validate(var)

  defp validate(value, name), do: value || not_set(name)

  defp not_set(var) do
    IO.puts "Environment variable #{var} not set!"
    IO.puts "Exiting..."
    System.halt(253)
  end
end
